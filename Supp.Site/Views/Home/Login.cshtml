@model Supp.Models.LoginDto
@using Supp.Site.Controllers;
@using Newtonsoft.Json;
@using Supp.Site.Common;
@using static Supp.Site.Common.Config;
@using System.Collections.Generic;
@using System;

@{
    ViewData["Title"] = "Login";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var culture = HomeController.Culture;
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <h1>@ViewData["Title"]</h1>

    <hr />
    <div>
        <div class="form-group">
            @Html.LabelFor(m => m.UserName)
            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.UserName)
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Password)
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Password)
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Submit</button>
            @*@Html.ActionLink("Reset password", "ResetPassword")*@
        </div>
        <div class="text-danger" style="padding:30px;">
            @Html.ValidationSummary(false)
        </div>
    </div>
}
<div class="text-danger" style="padding:30px;">
    @{
        var suppUtility = new SuppUtility();
        string errorsFromCookie = suppUtility.ReadCookie(Context.Request, GeneralSettings.Constants.SuppSiteErrorsCookieName);

        if (errorsFromCookie == null) { errorsFromCookie = String.Empty; }
        var errors = JsonConvert.DeserializeObject<List<string>>(errorsFromCookie);
    }

    @if (errors != null)
    {
        <ul>
            @foreach (var error in errors as List<string>)
            {
                <li>@Html.Raw(error)</li>
            }
        </ul>
    }

    @{
        suppUtility.RemoveCookie(Context.Response, Context.Request, GeneralSettings.Constants.SuppSiteErrorsCookieName);
    }
</div>


