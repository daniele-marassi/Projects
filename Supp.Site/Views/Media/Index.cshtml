@model X.PagedList.IPagedList<Supp.Site.Models.MediaDto>

@using Supp.Site.Controllers;
@using X.PagedList.Mvc.Core

<link href="~/css/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewData["Title"] = "Media List";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var culture = HomeController.Culture;
}

@using (Html.BeginForm("Index", "Media", FormMethod.Get))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <h1>@ViewData["Title"]</h1>

    <hr />

    <div>
        <p>
            <a asp-action="Create">Create New</a>
        </p>
        <p>
            Find: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
            <input type="submit" value="Search" class="btn btn-primary" style="margin-top:-2px;" />
        </p>
        <table class="table">
            <thead>
                <tr>
                    <th id="selectable">
                        @Html.ActionLink("GoogleDriveAccount", "Index", new { sortOrder = "GoogleDriveAccount", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("FileId", "Index", new { sortOrder = "FileId", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("Name", "Index", new { sortOrder = "Name", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("Path", "Index", new { sortOrder = "Path", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("ModifiedTime", "Index", new { sortOrder = "ModifiedTime", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("CreatedTime", "Index", new { sortOrder = "CreatedTime", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("Size", "Index", new { sortOrder = "Size", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("FileExtension", "Index", new { sortOrder = "FileExtension", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("MimeType", "Index", new { sortOrder = "MimeType", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("VideoDurationMillis", "Index", new { sortOrder = "VideoDurationMillis", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("VideoHeight", "Index", new { sortOrder = "VideoHeight", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("VideoWidth", "Index", new { sortOrder = "VideoWidth", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("ImageTime", "Index", new { sortOrder = "ImageTime", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("ImageWidth", "Index", new { sortOrder = "ImageWidth", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("ImageHeight", "Index", new { sortOrder = "ImageHeight", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("ImageLocationAltitude", "Index", new { sortOrder = "ImageLocationAltitude", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("ImageLocationLatitude", "Index", new { sortOrder = "ImageLocationLatitude", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("ImageLocationLongitude", "Index", new { sortOrder = "ImageLocationLongitude", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("UserName", "Index", new { sortOrder = "UserName", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("Type", "Index", new { sortOrder = "Type", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("File", "Index", new { sortOrder = "File", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("Thumbnail", "Index", new { sortOrder = "Thumbnail", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("ThumbnailWidth", "Index", new { sortOrder = "ThumbnailWidth", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="selectable">
                        @Html.ActionLink("ThumbnailHeight", "Index", new { sortOrder = "ThumbnailHeight", currentFilter = ViewBag.CurrentFilter })
                    </th>
                    <th id="borderTitle"></th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    @foreach (var item in Model)
                    {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.GoogleDriveAccounts.Where(_ => _.Id == item.GoogleDriveAccountId).FirstOrDefault().Account)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FileId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Path)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ModifiedTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Size)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FileExtension)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.MimeType)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.VideoDurationMillis)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.VideoHeight)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.VideoWidth)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ImageTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ImageWidth)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ImageHeight)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ImageLocationAltitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ImageLocationLatitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ImageLocationLongitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.UserName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Type)
                    </td>
                    <td>
                        @(item.File.Length > 0)
                    </td>
                    <td>
                        @(item.Thumbnail.Length > 0)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ThumbnailWidth)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ThumbnailHeight)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="text-danger">
        @Html.ValidationSummary(false)
    </div>
}
    Page @if (Model != null)
{@(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)} of @if (Model != null)
    {@Model.PageCount}

@if (Model != null)
{@Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))}