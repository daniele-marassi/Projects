@model Supp.Site.Models.WebSpeechDto

@using Supp.Site.Controllers;
@using Supp.Site.Common;

@{
    ViewData["Title"] = "Box";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var culture = HomeController.Culture;
}

@using (Html.BeginForm("Recognition", "WebSpeeches", FormMethod.Get))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
        //101
        var final_transcript = '';
        var recognizing = false;
        var ignore_onend = true;
        var recognition = null;
        var _phrase = null;
        var _old_phrase = '';
        var listeningPhrase = '';
        var r = [];
        var ellipseStep = [];
        var animateIntervals = [];
        var recognitionActive = true;
        var speech = null;
        var serviceInterval = null;
        var hosts = [];
        var _reset = false;
        var hosts_cmb_string ='';
        var two_line = /\n\n/g;
        var one_line = /\n/g;
        var first_char = /\S/;
        var fakeClickMilliseconds = 0;
        var url = null;
        var resetActive = false;
        var countTheTimesToReset = 0;
        var audioActive = true;
        var shortcuts;
        var synth = null;
        var readOutLoudActive = false;
        var firstLoad = true;

        //@*Model Variables*@
        var answer = '';
        var startAnswer = '';
        var finalStep = false;
        var hostsArrayString = '';
        var _error = '';
        var application = false;
        var alwaysShow = false;
        var resetAfterLogin = false;
        var culture = '';
        var id = '';
        var hostSelected = '';
        var phrase = '';
        var listeningWord1 = '';
        var listeningWord2 = '';
        var executionQueueId = '';
        var shortcutsInJson = '';
        var type = '';
        var parameters = ''; 
        var ehi = 0;
        //@*Model Variables*@

        function VariablesAssignmentFromJson(jsonString) {
            //console.log('###' + jsonString + '###');
            var model = JSON.parse(jsonString);

            answer = DecodeUnicode(model['Answer']);
            startAnswer = DecodeUnicode(model['StartAnswer']);
            finalStep = GetBoolean(DecodeUnicode(model['FinalStep']));
            hostsArrayString = DecodeUnicode(model['HostsArray']);
            _error = DecodeUnicode(model['Error']);
            application = GetBoolean(DecodeUnicode(model['Application']));
            alwaysShow = GetBoolean(DecodeUnicode(model['AlwaysShow']));
            resetAfterLogin = GetBoolean(DecodeUnicode(model['ResetAfterLogin']));
            culture = DecodeUnicode(model['Culture']);
            id = DecodeUnicode( model['Id']);
            hostSelected =DecodeUnicode( model['HostSelected']);
            phrase = DecodeUnicode(model['Phrase']);
            listeningWord1 = DecodeUnicode(model['ListeningWord1']);
            listeningWord2 = DecodeUnicode(model['ListeningWord2']);
            executionQueueId = DecodeUnicode(model['ExecutionQueueId']);
            shortcutsInJson = DecodeUnicode(model['ShortcutsInJson']);
            type = DecodeUnicode(model['Type']);
            parameters = DecodeUnicode(model['Parameters']); 
            ehi = 0;
            try {
                ehi=parseInt(DecodeUnicode(model['Ehi']));
            }
            catch (error) { ehi = 0; }
        }

        function VariablesAssignmentFromModel() {
            answer = '@Model?.Answer';
            startAnswer = '@Model?.StartAnswer';
            finalStep = GetBoolean('@Model?.FinalStep');
            hostsArrayString = '@Model?.HostsArray';
            _error = '@Model?.Error';
            application = GetBoolean('@Model?.Application');
            alwaysShow = GetBoolean('@Model?.AlwaysShow');
            resetAfterLogin = GetBoolean('@Model?.ResetAfterLogin');
            culture = '@Model?.Culture';
            id = '@Model?.Id';
            hostSelected = '@Model?.HostSelected';
            phrase = '@Model?.Phrase';
            listeningWord1 = '@Model?.ListeningWord1';
            listeningWord2 = '@Model?.ListeningWord2';
            executionQueueId = '@Model?.ExecutionQueueId';
            shortcutsInJson = '@Model?.ShortcutsInJson';
            type = '@Model?.Type';
            parameters = '@Model?.Parameters'; 
            ehi = 0;
            try {
                ehi=parseInt('@Model?.Ehi');
            }
            catch (error) { ehi = 0; }
        }
        
        function AddAnimateInterval(id, size, range, amount, milliseconds) {
            if (animateIntervals[id] != null) clearInterval(animateIntervals[id]);
            animateIntervals[id] = setInterval( function() { SetEllipse(id, size, range, amount, 0); }, milliseconds );
        }

        function StopAnimateIntervalsListening(milliseconds) {
            //if (animateIntervals['StopAnimateIntervalsListening'] != null) 
            clearInterval(animateIntervals['StopAnimateIntervalsListening']);
            animateIntervals['StopAnimateIntervalsListening'] = setInterval( function() { StopAnimateIntervalsListeningDelay(); }, milliseconds );
        }

        function StopAnimateIntervalsListeningDelay(){
            StopAnimateIntervals(); 
            StartAnimateIntervals(70); 
            clearInterval(animateIntervals['StopAnimateIntervalsListening']);
        }

        function StopAnimateIntervals(){
            clearInterval(animateIntervals['ellipse1']);
            clearInterval(animateIntervals['ellipse2']);
            clearInterval(animateIntervals['ellipse3']);
            clearInterval(animateIntervals['ellipse4']);
            clearInterval(animateIntervals['ellipse5']);

            animateIntervals['ellipse1'] = null;
            animateIntervals['ellipse2'] = null;
            animateIntervals['ellipse3'] = null;
            animateIntervals['ellipse4'] = null;
            animateIntervals['ellipse5'] = null;
            DefaultEllipses(1);
        }

        function DefaultEllipses(amount){
            SetEllipse('ellipse1', 50, 4, 1, amount, 1);
            SetEllipse('ellipse2', 50, 4, 1, amount, 1);
            SetEllipse('ellipse3', 50, 4, 1, amount, 1);
            SetEllipse('ellipse4', 50, 4, 1, amount, 1);
            SetEllipse('ellipse5', 50, 4, 1, amount, 1);   
        }

        function StartAnimateIntervalsListening(amount){
            AddAnimateInterval('ellipse1', 50, 8, 1, amount + 0);
            AddAnimateInterval('ellipse2', 50, 6, 1, amount + 5);
            AddAnimateInterval('ellipse3', 50, 7, 1, amount + 10);
            AddAnimateInterval('ellipse4', 50, 9, 1, amount + 15);
            AddAnimateInterval('ellipse5', 50, 10, 1, amount + 20);           
        }        

        function StartAnimateIntervals(amount){
            AddAnimateInterval('ellipse1', 50, 4, 1, amount + 10);
            AddAnimateInterval('ellipse2', 50, 4, 1, amount + 14);
            AddAnimateInterval('ellipse3', 50, 4, 1, amount + 16);
            AddAnimateInterval('ellipse4', 50, 4, 1, amount + 18);
            AddAnimateInterval('ellipse5', 50, 4, 1, amount + 20);   
        }

        function SetEllipse(id, size, range, amount, reset) {
            var ellipse = document.getElementById(id);

            if (r[id] == null){
                r[id] = new Array();
                r[id]['x']=0;
                r[id]['y']=0;
            }

            if(reset == 1) {
                ellipse.setAttribute("ry", size);
                ellipse.setAttribute("rx", size);
                r[id]['x']=0;
                r[id]['y']=0;
                return;
            }

            var xy ="";
            if(Math.floor(Math.random() * 2)==0) {
                xy ="y";
            } else { 
                xy ="x";
            }

            if (ellipseStep[id] == null) ellipseStep[id] = 0;

            if (ellipse != null) {
                if (r[id][xy] < range && ellipseStep[id] == 0) {
                    r[id][xy] = r[id][xy] + amount;
                }

                if (r[id][xy] >= range && ellipseStep[id] == 0) {
                    ellipseStep[id] = amount;
                }

                if (r[id][xy] <= range && ellipseStep[id] == 1) {
                    r[id][xy] = r[id][xy] - amount;
                }

                if (r[id][xy] <= -range && ellipseStep[id] == 1) {
                    ellipseStep[id] = 0;
                }

                if(xy == "y") {
                    ellipse.setAttribute("ry", size + r[id]['y']);
                } 

                if(xy == "x"){ 
                     ellipse.setAttribute("rx", size + r[id]['x']);
                }
            }
        }

        function ReadOutLoud(_message, _finalStep) {
            readOutLoudActive = true;
            recognitionActive = false;
            if(recognition != null){
                recognition.abort();
                recognition.stop();
            }

            //console.log('[' + _message + ']');

            _message = _message.replace(/\./g, '. ');
            _message = _message.replace(/:/g, ': ');
            _message = _message.replace(/;/g, '; ');
            _message = _message.replace(/,/g, ', ');
            
            _message = _message.replace(/   /g, ' ');
            _message = _message.replace(/  /g, ' ');

            var message = '';
            var words = _message.split(' ');
            var countWords = words.length;
            var maxWords = 30;
            var actualWords = 0;

            actualWords = maxWords;
            _finalStep = false;

            if(_finalStep == false){
                var isActualWord = true;

                for (var i = 0; i < countWords; i++)
                {
                    if(isActualWord == true)
                    {
                        if(message != '') message += ' ';
                        message += words[i];
                    } 

                    if((i == actualWords) || (i <= actualWords && (words[i].indexOf('.') > -1 || words[i].indexOf(',') > -1 || words[i].indexOf(';') > -1 || words[i].indexOf(':') > -1))) isActualWord = false;
                }  

                _message = _message.replace(message, '').trim();    

                if(_message == '')_finalStep = true;
            }
            
            //console.log('[' + message + ']');

            document.getElementById('final_span').innerHTML = message.trim();

            StartAnimateIntervalsListening(10);
            speech = new SpeechSynthesisUtterance();
            // Set the text and voice attributes.
            speech.text = message.trim();
            speech.volume = 1;
            speech.rate = 1;
            speech.pitch = 1;
            speech.lang = culture;

            synth = window.speechSynthesis;
            var speakHasError = false;

            try {
               synth.speak(speech);
            }
            catch (error) { 
                speakHasError=true;
            }

            var speakIsSuccesuful = synth.speaking;

            if(speakIsSuccesuful == false || speakHasError == true) {
                //PartialReset();
                InitFinal();
            }
            
            speech.onend = function(event) {
                if(_finalStep==true || readOutLoudActive == false || _message == null || _message == '' || _message == 'null'){

                    if(recognition != null && IsMobile() == false){                  
                        try {
                            recognition.start();
                        }
                        catch (error) { } 
                    }
                    StopAnimateIntervalsListening(100);
                    recognitionActive = true;
                    readOutLoudActive = false;
                    answer = null;
                    document.getElementById('final_span').innerHTML = '';
                    document.getElementById('interim_span').innerHTML = '';

                    countTheTimesToReset = 0;
                    if(ehi == 1 && recognitionActive == true) resetActive = true;   
                    if(ehi == 0 && recognitionActive == true && alwaysShow == false) {
                        //Reset(true);
                        PartialReset();
                    }
                    if(ehi == 0 && recognitionActive == true && alwaysShow == true) {
                        PartialReset();
                        //InitFinal();
                    }
                } else {
                    synth.cancel();
                    ReadOutLoud(_message, _finalStep); 
                }
            }
        }

        function ExecutionFinished(){
            if(url != null && application == true)
            {
                var json = "{_id:"+id+",_hostSelected:"+hostSelected+"}";
                var _url = url.replace("Recognition","ExecutionFinished")+'?_id='+executionQueueId+'&_hostSelected='+hostSelected;
                SendHttpRequest("POST", _url, json, null);
            }
        }

        function GetBoolean(value){
            var result = false;
            if(value == '1' || value == 1 || value == "True" || value == "true" || value == true ) result = true;
            return result;
        }

        function InitPage(){
            //application = true;
            if(application == true){
                document.getElementById('menu_button').style.display = 'inline';
                document.getElementById('menu_button').style.marginLeft = '400px';

                var element = document.getElementById("menu_items");
                element.classList.remove("flex-sm-row-reverse");
                element.classList.remove("d-sm-inline-flex");
                element.classList.remove("navbar-expand-sm");
                element.classList.remove("navbar-collapse");

                element = document.getElementById("navbarBrand");
                element.classList.remove("flex-sm-row-reverse");
                element.style.color = '#333';

                document.getElementById('footerContainer').style.color = '#333';  
            }

            document.getElementById("sendPhrase_text")
                .addEventListener("keyup", function(event) {
                event.preventDefault();
                if (event.keyCode === 13) {
                    document.getElementById("sendPhrase_button").click();
                }
            });

            if(IsMobile() == true){
                document.getElementById('div_start').style.display = 'block';
            }
                    
            hostsArrayString = hostsArrayString.replace(/&quot;/g,'"');
            if(_error != null && _error != '') console.log(_error);
            try {
                hosts = JSON.parse(hostsArrayString);
            }
            catch (error) {  
                if(recognitionActive == true) Reset(true); 
            }   

            if(finalStep == false) {
                if(phrase != null && phrase != ''){           
                    if(_old_phrase != '') _old_phrase += ' ';
                    _old_phrase += phrase;
                }
            }
            else{
                _old_phrase = '';
            }

            if(hosts != null && hosts.length > 0 ){
                hosts_cmb_string='<select name="hosts_cmb" class="btn btn-dark" id="hosts_cmb" value="'+hostSelected+'" style="background-color:#000; color:#333;">';
                for (var i = 0; i < hosts.length; i++)
                {
                    hosts_cmb_string+='<option>'+ hosts[i]+'</option>';
                }  
                hosts_cmb_string+='</select>';
                $("#hosts_cmb_container").html(hosts_cmb_string);
            }
        }

        function SendPhrase(){
            if(_reset == false){
                _phrase = $("#sendPhrase_text").val();
                if(_phrase != null && _phrase != ''){
                    var phraseTmp = _phrase;
                    if(_old_phrase != '') phraseTmp = _old_phrase + ' ' + _phrase;

                    CallWebSpeechDtoInJson(('_phrase=' + phraseTmp + '&_hostSelected='+$("#hosts_cmb option:selected").text() + '&_application='+application), "ResultSendPhrase");
                }
            }
        }

        function CallWebSpeechDtoInJson(paramString, funcName){           
            var _url = url.replace("Recognition","GetWebSpeechDtoInJson")+'?' + paramString;

            PartialReset();
                    
            SendHttpRequest("GET", _url, null, funcName);
        } 

        function ResultSendPhrase(result){           
            VariablesAssignmentFromJson(result);
            Speak();
            Action(type, parameters);
        }

        function DecodeUnicode(str){
            str = decodeURIComponent(str);
            str = str.replace(new RegExp('/u0022', 'g'), '"');

            str = str.replace(new RegExp('/U00E0', 'g'), "à");
            str = str.replace(new RegExp('/U00E8', 'g'), "è");
            str = str.replace(new RegExp('/U00F2', 'g'), "ò");
            str = str.replace(new RegExp('/U00F9', 'g'), "ù");
            str = str.replace(new RegExp('/U00EC', 'g'), "ì");

            str = str.replace(new RegExp('/U00C0', 'g'), "à");
            str = str.replace(new RegExp('/U00C8', 'g'), "è");
            str = str.replace(new RegExp('/U00D2', 'g'), "ò");
            str = str.replace(new RegExp('/U00D9', 'g'), "ù");
            str = str.replace(new RegExp('/U00CC', 'g'), "ì");

            str = str.replace(new RegExp('/U0027', 'g'), "'");

            str = str.replace(new RegExp('/U00D', 'g'), " ");
            str = str.replace(new RegExp('/U00A', 'g'), " ");
			
            str = str.replace(new RegExp('/u00E0', 'g'), "à");
            str = str.replace(new RegExp('/u00E8', 'g'), "è");
            str = str.replace(new RegExp('/u00F2', 'g'), "ò");
            str = str.replace(new RegExp('/u00F9', 'g'), "ù");
            str = str.replace(new RegExp('/u00EC', 'g'), "ì");
							   
            str = str.replace(new RegExp('/u00C0', 'g'), "à");
            str = str.replace(new RegExp('/u00C8', 'g'), "è");
            str = str.replace(new RegExp('/u00D2', 'g'), "ò");
            str = str.replace(new RegExp('/u00D9', 'g'), "ù");
            str = str.replace(new RegExp('/u00CC', 'g'), "ì");
							   
            str = str.replace(new RegExp('/u0027', 'g'), "'");
							   
            str = str.replace(new RegExp('/u00D', 'g'), " ");
            str = str.replace(new RegExp('/u00A', 'g'), " ");		

            return str;
        }

        function Upgrade() {
            if(recognitionActive == true) StopAnimateIntervals();
            console.log('info_upgrade');
        }

        function Linebreak(s) {
            return s.replace(two_line, '<p></p>').replace(one_line, '<br>');
        }

        function Capitalize(s) {
            return s.replace(first_char, function (m) { return m.toUpperCase(); });
        }

        function StartButton(event) {
            try {
                recognition.abort();
                recognition.stop();
            }
            catch (error) { } 

            if (animateIntervals['ellipse1'] == null && recognitionActive == true) StartAnimateIntervals(70);
            final_transcript = '';
            recognition.lang = culture;
            //SetAudio();

            try {
                recognition.start();
            }
            catch (error) { } 

            recognitionActive = true;
            ignore_onend = false;
        }

        function InitSpeech(){
            if (!('webkitSpeechRecognition' in window)) {
                Upgrade();
            } else {
                recognition = new webkitSpeechRecognition('No warning should arise');

                recognition.continuous = true;
                recognition.interimResults = true;

                recognition.onstart = function () {
                    recognizing = true;
                    console.log('info_speak_now');
                };

                recognition.onerror = function (event) {
                    console.log('recognition.onerror: ' + event.error);
                    if(recognitionActive == true){
                        PartialReset();
                        StopAnimateIntervals();
                        InitFinal();
                    }
                    if (event.error == 'no-speech') {
                        console.log('info_no_speech');
                        ignore_onend = true;
                    }
                    if (event.error == 'audio-capture') {
                        console.log('info_no_microphone');
                        ignore_onend = true;
                    }
                    if (event.error == 'not-allowed') {
                        console.log('not-allowed');
                        ignore_onend = true;
                    }
                };

                recognition.onend = function () {     
                    if(recognitionActive == true){
                        PartialReset();
                        InitFinal();
                    }
                };

                recognition.onresult = function (event) {
                    for (var i = event.resultIndex; i < event.results.length; ++i) {
                        if(_phrase == null){
                            _phrase = event.results[i][0].transcript.toLowerCase().trim();
                            if (_phrase != '' && _phrase != null) {
                                countTheTimesToReset = 0;
                                if(recognitionActive == true) StartAnimateIntervalsListening(10);
                                if(recognitionActive == true) StopAnimateIntervalsListening(500);
                                if (recognitionActive == true) console.log(_phrase);
                                var _phraseSplit = _phrase.split(" ");
                                if (_phraseSplit.length > 0 && recognitionActive == true) {
                                    if (event.results[i].isFinal){
                                        if (_phraseSplit.length > 1 && _phraseSplit[0] == listeningWord1 && _phraseSplit[1] == listeningWord2 && ehi == 0 && _reset == false) {

                                            var audio = new Audio("/Files/Ehi.mp3");
                                            audio.play();
                                            
                                            var phraseTmp = listeningWord1 + ' ' + listeningWord2;
                                           
                                            clearInterval(serviceInterval);
                                            
                                            CallWebSpeechDtoInJson(('_phrase=' + phraseTmp + '&_hostSelected='+$("#hosts_cmb option:selected").text() + '&_application='+application), "ResultRecognitionEhi");
                                        } else if (ehi == 1 && _phrase != listeningPhrase && _phrase != null && _phrase!= '' && _reset == false) {

                                            var audio = new Audio("/Files/Ehi.mp3");
                                            audio.play();

                                            var phraseTmp = _phrase;
                                            if(_old_phrase != '') phraseTmp = _old_phrase + ' ' + _phrase;
                                           
                                            clearInterval(serviceInterval);

                                            CallWebSpeechDtoInJson(('_phrase=' + phraseTmp + '&_hostSelected='+$("#hosts_cmb option:selected").text() + '&_application='+application), "ResultRecognitionPhrase");
                                        }
                                    }
                                }
                            }
                            _phrase = null;
                        }
                    }

                    var interim_transcript = '';
                    if (typeof (event.results) == 'undefined') {
                        if(recognitionActive == true) StopAnimateIntervals();
                    }
                    for (var i = event.resultIndex; i < event.results.length; ++i) {
                        if (event.results[i].isFinal) {
                            final_transcript += event.results[i][0].transcript;
                        } else {
                            interim_transcript += event.results[i][0].transcript;
                        }
                    }
                    final_transcript = Capitalize(final_transcript);
                    document.getElementById('final_span').innerHTML = Linebreak(final_transcript);
                    document.getElementById('interim_span').innerHTML = Linebreak(interim_transcript);
                    if (final_transcript || interim_transcript) {
                        document.getElementById('final_span').innerHTML = '';
                    }
                };
            }
        }

        function ResultRecognitionPhrase(result){           
            VariablesAssignmentFromJson(result);
            Speak();
            Action(type, parameters);
        }

        function ResultRecognitionEhi(result){           
            VariablesAssignmentFromJson(result);
            Speak();
            Action(type, parameters);
        }

        function SimulateClick(control) {
            if (document.all) {
                control.click();
            } else {
                var evObj = document.createEvent('MouseEvents');
                evObj.initMouseEvent('click', true, true, window, 1, 12, 345, 7, 220, false, false, true, false, 0, null);
                control.dispatchEvent(evObj);
            }
        }

        function Service() {
            //if(audioActive == true) SetAudio();

            if(resetActive && countTheTimesToReset == 10 && recognitionActive == true){
                countTheTimesToReset = 0;
                resetActive = false;
                if(alwaysShow == false) PartialReset(); //Reset(true);
                if(alwaysShow == true) PartialReset();
            }

            if(resetActive && recognitionActive == true) countTheTimesToReset++;
            else countTheTimesToReset = 0;
        }

        function SetAudio(){
            if(audioActive == true) {
                navigator.mediaDevices.getUserMedia({ audio: true })
                .then(function (stream) {
                    window.localStream = stream;
                    console.log('You let me use your mic!')
                })
                .catch(function (err) {
                    console.log('No mic for you!')
                });
            } else {
                window.localStream.getTracks().forEach( (track) => {
                    track.stop();
                     console.log('mic off')
                });
                window.localStream.getAudioTracks()[0].stop();
            }
        }

        function HexDecode(str) {
            str = str.replace(/&aacute;/g, "à");
            str = str.replace(/&eacute;/g, "è");
            str = str.replace(/&oacute;/g, "ò");
            str = str.replace(/&uacute;/g, "ù");
            str = str.replace(/&iacute;/g, "ì");

            str = str.replace(/&Aacute;/g, "à");
            str = str.replace(/&Eacute;/g, "è");
            str = str.replace(/&Oacute;/g, "ò");
            str = str.replace(/&Uacute;/g, "ù");
            str = str.replace(/&Iacute;/g, "ì");

            str = str.replace(/&#xE0;/g, "à");
            str = str.replace(/&#xE8;/g, "è");
            str = str.replace(/&#xF2;/g, "ò");
            str = str.replace(/&#xF9;/g, "ù");
            str = str.replace(/&#xEC;/g, "ì");

            str = str.replace(/&#xC0;/g, "à");
            str = str.replace(/&#xC8;/g, "è");
            str = str.replace(/&#xD2;/g, "ò");
            str = str.replace(/&#xD9;/g, "ù");
            str = str.replace(/&#xCC;/g, "ì");

            str = str.replace(/&#x27;/g, "'");

            str = str.replace(/&#xD;/g, " ");
            str = str.replace(/&#xA;/g, " ");

            return str;
        }

        function Speak(){
            if (answer != null && answer != '' && answer != 'null') {
                document.getElementById('final_span').innerHTML = '';
                document.getElementById('interim_span').innerHTML = '';
                var _answer = HexDecode(answer);
                
                ReadOutLoud(_answer); 
                //answer = null;
            } else {
                PartialReset();
            }
        }

        function Reset(reset){
            PartialReset();
            if(_reset == false){ 
                 _reset = true;
                clearInterval(serviceInterval);
                location.href = '@Url.Action("Recognition", "WebSpeeches")?_reset='+ reset + '&_application='+application + '&_executionQueueId='+ executionQueueId + '&_hostSelected='+hostSelected;
            }
        }

        function PartialReset(){
            ehi = 0;
            listeningPhrase = '';
            _old_phrase = '';
            _phrase = null;
            resetActive = false;
            audioActive = true;
            countTheTimesToReset = 0;
            $("#sendPhrase_text").val('');
            document.getElementById('final_span').innerHTML = '';
            document.getElementById('interim_span').innerHTML = '';
        }

        function InitFinal(){
            clearInterval(serviceInterval);
            serviceInterval = setInterval( function() { Service(); }, 1000);
            
            if(firstLoad == false) fakeClickMilliseconds = 500;
            else {            
                firstLoad = false;
                fakeClickMilliseconds = 2000;
            }

            document.getElementById('final_span').innerHTML = '';
            document.getElementById('interim_span').innerHTML = '';
            
            setTimeout(function(){
                SimulateClick(document.getElementById('fakeClick_button'));

                setTimeout(function(){
                    Action(type, parameters);

                    SetAudio();
                
                    if(IsMobile() == false) StartButton(event);

                    Speak();
                }, 50);  

            }, fakeClickMilliseconds);  

            var _shortcutsInJson = (shortcutsInJson).replace(/&quot;/g, '"');
            shortcuts = JSON.parse(_shortcutsInJson);
            
            CreateShortcuts(shortcuts);
        }

        function FakeClick(){
            console.log('FakeClick');      
        }

        function ClearUrl(){
            var _url = window.location.toString();
            var splitUrl = _url.split('?');
            url = splitUrl[0];
            history.pushState({}, null, url);        
        }

        function IsMobile(){
            var result = false;
            if(/iPhone|iPad|iPod|Android|webOS|BlackBerry|Windows Phone/i.test(navigator.userAgent) || screen.availWidth <= 480){
                result = true;
            }
            
            return result;
        }

        function RecognitionEnableDisable(){
            if(recognitionActive == true){
                clearInterval(serviceInterval);
                serviceInterval = null;
                PartialReset();
                recognitionActive = false;
                audioActive = false;
                SetAudio();
                recognition.abort();
                recognition.stop();
                StopAnimateIntervals();
                clearInterval(animateIntervals['StopAnimateIntervalsListening']);
                animateIntervals['StopAnimateIntervalsListening'] = null;
                document.getElementById("recognitionEnableDisable_image").src = '/Images/micOff.png';
                
            } else {
                PartialReset();
                recognitionActive = true;
                audioActive = true;
                InitFinal();
                document.getElementById("recognitionEnableDisable_image").src = '/Images/micOn.png';
            }
        }

        function MenuClick() {
            if(application == true){
                var element = document.getElementById("menu_items");
                if(element.style.display != 'inline') element.style.display = 'inline';
                else element.style.display = 'none';
            }
        }

        function OpenShortcuts(){
            var element = document.getElementById("div_shortcuts");
            element.style.display = "block";
        }

        function CloseShortcuts(){
            var element = document.getElementById("div_shortcuts");
            element.style.display = "none";
        }

        function ActionShortcut(id){
            if(parseInt(id) == 0) CloseShortcuts();

            for (var i = 0; i < shortcuts.length; ++i) {
                var shortcut = shortcuts[i];

                if(shortcut['Id'] == parseInt(id)){

                    if(application == false && shortcut['Type'] == 'Link' ){
                        window.open(shortcut['Action']);
                    }

                    else if(application == true && shortcut['Type'] == 'Link' ){
                        window.open(shortcut['Action'], "open link", 'width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1');
                    } 
                    
                    else {
                        CallWebSpeechDtoInJson(('_id=' + shortcut['Id'] + '&_hostSelected='+$("#hosts_cmb option:selected").text() + '&_application='+application), "ResultActionShortcut");
                    }  
                }
            }
        }

        function ResultActionShortcut(result){           
            VariablesAssignmentFromJson(result);
            Speak();
            Action(type, parameters);
        }

        function Action(type, link){
            if(application == false && type == 'Link' && link != null && link != '' && link != 'null' ){
                window.open(link);
            }

            else if(application == true && type == 'Link' && link != null && link != '' && link != 'null' ){
                window.open(link, "open link", 'width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1');
            } 

            else if(application == false && type == 'SystemWebSearch' && link != null && link != '' && link != 'null' ){
                window.open(link);
            }

            else if(application == true && type == 'SystemWebSearch' && link != null && link != '' && link != 'null'){
                window.open(link, "search", 'width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1');
            } 
        }

        function AddShortcuts(shortcut){
            var element = document.getElementById("shortcutsContainer");
            var dt = '';

            if(shortcut['Ico'] == null || shortcut['Ico'] == '') shortcut['Ico'] = '/Images/Shortcuts/generic.png';

            dt += '<dt class="col-sm-3" style="">';
            dt += '<div>';
            dt += '<img class="btn shortcut-dark" id="shortcut_'+shortcut['Id']+'" src="'+shortcut['Ico']+'" alt="'+shortcut['Title']+'" style="width:90%; margin:5%;" onclick="ActionShortcut(' + "" + shortcut['Id'] + "" +');">';

            dt += '</div>';
            dt += '<div style="font-size:18px;">'+shortcut['Title']+'</div>';
            dt += '</dt>';

            element.innerHTML += dt;
        }

        function CreateShortcuts(_shortcuts){
            var element = document.getElementById("shortcutsContainer");
            element.innerHTML = '';

            for (var i = 0; i < _shortcuts.length; ++i) {
                var shortcut = _shortcuts[i];
                
                if(i == 0){
                    var _shortcut = JSON.parse('{"Id":"' + i + '", "Ico":"/Images/Shortcuts/close.png", "Title":"Close", "Action":"Close"}');
                    AddShortcuts(_shortcut);
                }

                AddShortcuts(shortcut);
            }
        }

	    function ExecuteFunction(funcName, par)
	    {
		    var funcCall = funcName;
            if(par != undefined && par != null && par != '') funcCall += "('" + par + "');";
            else funcCall += "();";

		    var ret = eval(funcCall);		
	    }	

	    function EllipseClick()
	    {
	       if(readOutLoudActive == false) OpenShortcuts();
           if(readOutLoudActive == true){
                readOutLoudActive = false;
                synth.cancel();
            }
	    }	

        function SendHttpRequest(method, url, json, funcName) {
            var xhr = new XMLHttpRequest();
            xhr.open(method, url, true);
            xhr.onload = function(e) {
                code = xhr.response;
                if(funcName != undefined && funcName != null && funcName != '') ExecuteFunction(funcName, code);
            };
            xhr.onerror = function () {
                console.error("** An error occurred during the XMLHttpRequest");
            };
            xhr.setRequestHeader("Content-type", "application/json");
            if(json != null && json != '') xhr.send(json);
            else xhr.send();
        }
    </script>
}
    
<div id="main">
    <div style="text-align:center;">
        <div id="div_shortcuts" style="display: none; z-index: 999; width: 70%; position: absolute; background-color: rgb(50, 50, 50); left: 0; right: 0; margin:auto; box-shadow: 0 0rem 1rem rgba(150, 150, 150, 0.95) !important;">
            <dl id="shortcutsContainer" class="row" style="max-height:600px; overflow-y:auto; " >
            </dl>
        </div>
        <div id="div_ellipse" style="margin:50px; padding-bottom:40px;">
            <svg viewBox="-7 -20 210 140" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <filter id="blurMe">
                        <feGaussianBlur in="SourceGraphic" stdDeviation="5" />
                    </filter>
                </defs>
                <ellipse id="ellipse1" cx="100" cy="50" rx="50" ry="50" style="fill: #c9c30d;" filter="url(#blurMe)"/>
                <ellipse id="ellipse2" cx="100" cy="50" rx="50" ry="50" style="fill: #02ad02;" filter="url(#blurMe)"/>
                <ellipse id="ellipse3" cx="100" cy="50" rx="50" ry="50" style="fill: #026aad;" filter="url(#blurMe)"/>
                <ellipse id="ellipse4" cx="100" cy="50" rx="50" ry="50" style="fill: #7a1cc9;" filter="url(#blurMe)"/>
                <ellipse id="ellipse5" cx="100" cy="50" rx="50" ry="50" style="fill: #c22b10;" filter="url(#blurMe)"/>
                <ellipse id="ellipse6" cx="100" cy="50" rx="48" ry="48" style=" cursor:pointer;" onclick="EllipseClick();"  class="btn ellipse-dark" />
            </svg>
        </div>
        <div id="hosts_cmb_container" style="text-align:center; margin-top:-100px;">
        </div>
        <div id="div_text" style="text-align:center; width:100%; margin-top:2px;">
            <button id="recognitionEnableDisable_button" onclick="RecognitionEnableDisable()"  class="btn btn-dark" style="width:57px; border-width:1px; display: inline-block; outline: 0; box-shadow: none!important; height:38px; margin-top:-1px; margin-right:0px;">
                <img id="recognitionEnableDisable_image" src="/Images/micOn.png" alt="Microphone" style="height:34px; opacity:0.2; margin-top:-5px;">
            </button>
            <input type="text" id="sendPhrase_text" value="" style="height:38px; width:50%; display:inline-block; " class="btn btn-dark"/>
            <button id="sendPhrase_button" onclick="SendPhrase()" class="btn btn-dark" style="width:57px; display:inline-block; color:#333; border-width:1px; outline: 0;box-shadow: none!important; height:38px; margin-top:-1px;">Send</button>
            <button id="fakeClick_button" onclick="FakeClick();" style="display:none; "></button>
        </div>
        <div id="results" style="text-align:center;">
            <span class="final" id="final_span"></span> 
            <span class="interim" id="interim_span" style="overflow:hidden;"></span>
        </div>
        <div id="div_start" style="display: none;">
	        <button id="start_button" onclick="StartButton(event)" style="border-width:1px; display: inline-block; outline: 0; box-shadow: none!important; height:100px; margin-top:100px; margin-right:0px;" class="btn btn-dark">
		        <img alt="Start" id="start_img" src="/Images/voice-control.png" style="height:100%; margin:-5px;">
	        </button>
        </div>
    </div>
</div>

<script>
	window.onload = function(e){   
        VariablesAssignmentFromModel();
        if(resetAfterLogin == true) {
            Reset(false);
        } else {
		    InitPage();
            InitSpeech();
            InitFinal();  
            ClearUrl();
        }
	}	
</script>