@model Supp.Models.WebSpeechDto

@using Supp.Site.Controllers;
@using Supp.Site.Common;

@{
    ViewData["Title"] = "Box";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var culture = HomeController.Culture;
}

@using (Html.BeginForm("Recognition", "WebSpeeches", FormMethod.Get))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script>
        //101
        var final_transcript = '';
        var recognizing = false;
        var ignore_onend = true;
        var recognition = null;
        var _phrase = null;
        var listeningPhrase = '';
        var r = [];
        var ellipseStep = [];
        var animateIntervals = [];
        var recognitionActive = true;
        var recognitionDisable = false;
        var speech = null;
        var serviceInterval = null;
        var hosts = [];
        var _reset = false;
        var hosts_cmb_string ='';
        var two_line = /\n\n/g;
        var one_line = /\n/g;
        var first_char = /\S/;
        var fakeClickMilliseconds = 0;
        var url = null;
        var partialResetActive = false;
        var resetActive = false;
        var countTheTimesToPartialReset = 0;
        var countTheTimeToResetInSeconds = 0;
        var audioActive = true;
        var shortcuts;
        var synth = null;
        var readOutLoudActive = false;
        var firstLoad = true;
        var initFinalTimeoutStep1 = null;
        var initFinalTimeoutStep2 = null;
        var actionShortcutTimeout = null;
        var sessionGuid = null;
        var voices;
        var phraseSended=false;
        var shortcutsOpen = false;

        //@*Model Variables*@
        var name = '';
        var answer = '';
        var startAnswer = '';
        var finalStep = false;
        var hostsArrayString = '';
        var _error = '';
        var application = false;
        var alwaysShow = false;
        var resetAfterLoad = false;
        var recognitionDisable = false;
        var onlyRefresh = false;
        var culture = '';
        var id = '';
        var hostSelected = '';
        var phrase = '';
        var listeningWord1 = '';
        var listeningWord2 = '';
        var executionQueueId = '';
        var shortcutsInJson = '';
        var type = '';
        var parameters = ''; 
        var ehi = 0;
        var timeToResetInSeconds = 0;
        var timeToEhiTimeoutInSeconds = 0;
        var subType = ''; 
        var step = 0;
        var newWebSpeechRequestName= '';
        //@*Model Variables*@

        function VariablesAssignmentFromJson(jsonString) {
            LogFunctionStart();
            //console.warn('###' + jsonString + '###');
            var model = JSON.parse(jsonString);

            name = DecodeUnicodeExtended(model['Name']);
            answer = DecodeUnicodeExtended(model['Answer']);
            startAnswer = DecodeUnicodeExtended(model['StartAnswer']);
            finalStep = GetBoolean(DecodeUnicodeExtended(model['FinalStep']));
            hostsArrayString = DecodeUnicodeExtended(model['HostsArray']);
            _error = DecodeUnicodeExtended(model['Error']);
            application = GetBoolean(DecodeUnicodeExtended(model['Application']));
            alwaysShow = GetBoolean(DecodeUnicodeExtended(model['AlwaysShow']));
            resetAfterLoad = GetBoolean(DecodeUnicodeExtended(model['ResetAfterLoad']));
            recognitionDisable = GetBoolean(DecodeUnicodeExtended(model['RecognitionDisable']));
            onlyRefresh = GetBoolean(DecodeUnicodeExtended(model['OnlyRefresh']));
            culture = DecodeUnicodeExtended(model['Culture']);
            id = DecodeUnicodeExtended( model['Id']);
            hostSelected =DecodeUnicodeExtended( model['HostSelected']);
            phrase = DecodeUnicodeExtended(model['Phrase']);

            if(finalStep == false) {
                if(phrase != null && phrase != ''){           

                }
            }
            else{
                stepType = "";
                step = 0;
                subType = "";
                id = 0;
            }

            listeningWord1 = DecodeUnicodeExtended(model['ListeningWord1']);
            listeningWord2 = DecodeUnicodeExtended(model['ListeningWord2']);

            listeningPhrase = listeningWord1.trim().toLowerCase();
            if(listeningPhrase != '') listeningPhrase += ' ';
            listeningPhrase += listeningWord2.trim().toLowerCase();

            executionQueueId = DecodeUnicodeExtended(model['ExecutionQueueId']);
            shortcutsInJson = DecodeUnicodeExtended(model['ShortcutsInJson']);
            newWebSpeechRequestName = DecodeUnicode(model['NewWebSpeechRequestName']);
            
            type = DecodeUnicodeExtended(model['Type']);
            parameters = DecodeUnicodeExtended(model['Parameters']); 
            ehi = 0;
            try {
                ehi=parseInt(DecodeUnicodeExtended(model['Ehi']));
            }
            catch (error) {}
            timeToResetInSeconds = 0;
            try {
                timeToResetInSeconds=parseInt(DecodeUnicodeExtended(model['TimeToResetInSeconds']));
            }
            catch (error) {}
            timeToEhiTimeoutInSeconds = 0;
            try {
                timeToEhiTimeoutInSeconds=parseInt(DecodeUnicodeExtended(model['TimeToEhiTimeoutInSeconds']));
            }
            catch (error) {}
            subType = DecodeUnicodeExtended(model['SubType']);
            step = -1;
            try {
                step=parseInt(DecodeUnicodeExtended(model['Step']));
            }
            catch (error) {}

            //application = true; //to debug

            LogFunctionEnd();
        }

        function VariablesAssignmentFromModel() {
            LogFunctionStart();
            name = '@Model?.Name';
            answer = '@Model?.Answer';
            startAnswer = '@Model?.StartAnswer';
            finalStep = GetBoolean('@Model?.FinalStep');
            hostsArrayString = '@Model?.HostsArray';
            _error = '@Model?.Error';
            application = GetBoolean('@Model?.Application');
            alwaysShow = GetBoolean('@Model?.AlwaysShow');
            resetAfterLoad = GetBoolean('@Model?.ResetAfterLoad');
            recognitionDisable = GetBoolean('@Model?.RecognitionDisable');
            onlyRefresh = GetBoolean('@Model?.OnlyRefresh');
            culture = '@Model?.Culture';
            id = '@Model?.Id';
            hostSelected = '@Model?.HostSelected';
            phrase = '@Model?.Phrase';

            if(finalStep == false) {
                if(phrase != null && phrase != ''){           

                }
            }
            else{
                stepType = "";
                step = 0;
                subType = "";
                id = 0;
            }

            listeningWord1 = '@Model?.ListeningWord1';
            listeningWord2 = '@Model?.ListeningWord2';

            listeningPhrase = listeningWord1.trim().toLowerCase();
            if(listeningPhrase != '') listeningPhrase += ' ';
            listeningPhrase += listeningWord2.trim().toLowerCase();

            executionQueueId = '@Model?.ExecutionQueueId';
            shortcutsInJson = '@Model?.ShortcutsInJson';
            newWebSpeechRequestName = '@Model?.NewWebSpeechRequestName';
            type = '@Model?.Type';
            parameters = '@Model?.Parameters'; 
            ehi = 0;

            try {
                ehi=parseInt('@Model?.Ehi');
            }
            catch (error) {}
            
            timeToResetInSeconds = 0;           
            try {
                timeToResetInSeconds=parseInt('@Model?.TimeToResetInSeconds');
            }
            catch (error) {}

            timeToEhiTimeoutInSeconds = 0;           
            try {
                timeToEhiTimeoutInSeconds=parseInt('@Model?.TimeToEhiTimeoutInSeconds');
            }
            catch (error) {}
            
            subType = '@Model?.SubType';
            step = -1;
            
            try {
                step=parseInt('@Model?.Step');
            }
            catch (error) {}

            //application = true; //to debug

            LogFunctionEnd();
        }
        
        function AddAnimateInterval(id, size, range, amount, milliseconds) {
            if (animateIntervals[id] != null) clearInterval(animateIntervals[id]);
            animateIntervals[id] = setInterval( function() { SetEllipse(id, size, range, amount, 0); }, milliseconds );
        }

        function StopAnimateIntervalsListening(milliseconds) {
            //if (animateIntervals['StopAnimateIntervalsListening'] != null) 
            clearInterval(animateIntervals['StopAnimateIntervalsListening']);
            animateIntervals['StopAnimateIntervalsListening'] = setInterval( function() { StopAnimateIntervalsListeningDelay(); }, milliseconds );
        }

        function StopAnimateIntervalsListeningDelay(){
            StopAnimateIntervals(); 
            StartAnimateIntervals(70); 
            clearInterval(animateIntervals['StopAnimateIntervalsListening']);
        }

        function StopAnimateIntervals(){
            clearInterval(animateIntervals['ellipse1']);
            clearInterval(animateIntervals['ellipse2']);
            clearInterval(animateIntervals['ellipse3']);
            clearInterval(animateIntervals['ellipse4']);
            clearInterval(animateIntervals['ellipse5']);

            animateIntervals['ellipse1'] = null;
            animateIntervals['ellipse2'] = null;
            animateIntervals['ellipse3'] = null;
            animateIntervals['ellipse4'] = null;
            animateIntervals['ellipse5'] = null;
            DefaultEllipses(1);
        }

        function DefaultEllipses(amount){
            SetEllipse('ellipse1', 50, 4, 1, amount, 1);
            SetEllipse('ellipse2', 50, 4, 1, amount, 1);
            SetEllipse('ellipse3', 50, 4, 1, amount, 1);
            SetEllipse('ellipse4', 50, 4, 1, amount, 1);
            SetEllipse('ellipse5', 50, 4, 1, amount, 1);   
        }

        function StartAnimateIntervalsListening(amount){
            AddAnimateInterval('ellipse1', 50, 8, 1, amount + 0);
            AddAnimateInterval('ellipse2', 50, 6, 1, amount + 5);
            AddAnimateInterval('ellipse3', 50, 7, 1, amount + 10);
            AddAnimateInterval('ellipse4', 50, 9, 1, amount + 15);
            AddAnimateInterval('ellipse5', 50, 10, 1, amount + 20);           
        }        

        function StartAnimateIntervals(amount){
            AddAnimateInterval('ellipse1', 50, 4, 1, amount + 10);
            AddAnimateInterval('ellipse2', 50, 4, 1, amount + 14);
            AddAnimateInterval('ellipse3', 50, 4, 1, amount + 16);
            AddAnimateInterval('ellipse4', 50, 4, 1, amount + 18);
            AddAnimateInterval('ellipse5', 50, 4, 1, amount + 20);   
        }

        function SetEllipse(id, size, range, amount, reset) {
            var ellipse = document.getElementById(id);

            if (r[id] == null){
                r[id] = new Array();
                r[id]['x']=0;
                r[id]['y']=0;
            }

            if(reset == 1) {
                ellipse.setAttribute("ry", size);
                ellipse.setAttribute("rx", size);
                r[id]['x']=0;
                r[id]['y']=0;
                return;
            }

            var xy ="";
            if(Math.floor(Math.random() * 2)==0) {
                xy ="y";
            } else { 
                xy ="x";
            }

            if (ellipseStep[id] == null) ellipseStep[id] = 0;

            if (ellipse != null) {
                if (r[id][xy] < range && ellipseStep[id] == 0) {
                    r[id][xy] = r[id][xy] + amount;
                }

                if (r[id][xy] >= range && ellipseStep[id] == 0) {
                    ellipseStep[id] = amount;
                }

                if (r[id][xy] <= range && ellipseStep[id] == 1) {
                    r[id][xy] = r[id][xy] - amount;
                }

                if (r[id][xy] <= -range && ellipseStep[id] == 1) {
                    ellipseStep[id] = 0;
                }

                if(xy == "y") {
                    ellipse.setAttribute("ry", size + r[id]['y']);
                } 

                if(xy == "x"){ 
                     ellipse.setAttribute("rx", size + r[id]['x']);
                }
            }
        }

        function ReadOutLoud(_message, _finalStep) {
            LogFunctionStart();
            readOutLoudActive = true;
            recognitionActive = false;
            if(recognition != null){
                recognition.abort();
                recognition.stop();
            }

            var messageBCK = _message;

            //console.warn('[' + _message + ']');

            _message = _message.replace(/\./g, '. ');
            _message = _message.replace(/:/g, ': ');
            _message = _message.replace(/;/g, '; ');
            _message = _message.replace(/,/g, ', ');
            
            _message = _message.replace(/   /g, ' ');
            _message = _message.replace(/  /g, ' ');

            _message = _message.replace(/\/n/g, ', ');
            _message = _message.replace(/\/r/g, ', ');

            var message = '';
            var words = _message.split(' ');
            var countWords = words.length;
            var maxWords = 30;
            var actualWords = 0;

            actualWords = maxWords;
            _finalStep = false;

            if(_finalStep == false){
                var isActualWord = true;

                for (var i = 0; i < countWords; i++)
                {
                    if(isActualWord == true)
                    {
                        if(message != '') message += ' ';
                        message += words[i];
                    } 

                    if((i == actualWords) || (i <= actualWords && (words[i].indexOf('.') > -1 || words[i].indexOf(',') > -1 || words[i].indexOf(';') > -1 || words[i].indexOf(':') > -1))) isActualWord = false;
                }  

                _message = _message.replace(message, '').trim();   

                var firstCharIndex = -1;
                var firstNumberIndex = -1;
                if(_message != null){
                    var firstCharMatch = _message.match('[a-zA-Z]');
                    if(firstCharMatch != null)firstCharIndex = firstCharMatch.index;
                    var firstNumberMatch = _message.match('[0-9]');                   
                    if(firstNumberMatch != null)firstNumberIndex = firstNumberMatch.index;
                }
                if(_message == '' || (firstCharIndex == -1 && firstNumberIndex == -1))_finalStep = true;
            }
            
            //console.warn('[' + message + ']');

            document.getElementById('final_span').innerHTML = message.trim();

            StartAnimateIntervalsListening(10);

            speech = new SpeechSynthesisUtterance();

            //console.warn(voices);
            
            // Set the text and voice attributes.
            speech.text = message.trim();
            speech.volume = 1;
            speech.rate = 1;
            speech.pitch = 1;
            speech.lang = culture;

            if(culture.toLowerCase() == "it-it") speech.voice = FindInArrayOfObject(voices, "name", "Google italiano");
            if(culture.toLowerCase() == "en-us") speech.voice = FindInArrayOfObject(voices, "name", "Google UK English Female");

            synth = window.speechSynthesis;
            var speakHasError = false;
            var _error = '';

            try {
               synth.speak(speech);
            }
            catch (error) { 
                speakHasError=true;
                _error = error;
            }

            var speakIsSuccesuful = synth.speaking;

            if(speakIsSuccesuful == false || speakHasError == true) {
                console.warn('speakIsSuccesuful:' + speakIsSuccesuful + ' - speakHasError:' + speakHasError + ' _error:'+_error);
                EndReadOutLoud();

                setTimeout(function () {
                    ReadOutLoud(messageBCK, _finalStep);
                }, 50);        

                return 0;
            }
            
            speech.onend = function(event) {
                LogFunctionStart('speech.onend');
                if (_finalStep == true || readOutLoudActive == false || _message == null || _message == ''){
                    EndReadOutLoud();
                } else {
                    if(synth != null) synth.cancel();
                    synth= null;
                    speech = null;
                    ReadOutLoud(_message, _finalStep); 
                }
                LogFunctionEnd('speech.onend');
            }
            LogFunctionEnd();
        }

        function EndReadOutLoud(){
            LogFunctionStart();
            if(synth != null) synth.cancel();
            synth= null;
            speech = null;

            if(recognition != null && IsMobile() == false){                  
                try {
                    recognition.start();
                }
                catch (error) { } 
            }

            if(IsMobile() == false){
                StopAnimateIntervalsListening(100);
            } else {
                StopAnimateIntervals();
                clearInterval(animateIntervals['StopAnimateIntervalsListening']);
                animateIntervals['StopAnimateIntervalsListening'] = null;                    
            }

            recognitionActive = true;
            readOutLoudActive = false;
                    
            document.getElementById('final_span').innerHTML = '';

            countTheTimesToPartialReset = 0;
            partialResetActive = false;
            countTheTimeToResetInSeconds = 0;

            if(ehi == 1 && recognitionActive == true) partialResetActive = true;  
            else if(ehi == 1 && phraseSended == true) partialResetActive = true;
            else PartialReset();

            if(recognitionDisable == true) RecognitionDisable();
            LogFunctionEnd();
        }

        function ExecutionFinished(){
            LogFunctionStart();
            if(url != null && application == true)
            {
                var json = "{_id:"+id+",_hostSelected:"+hostSelected+"}";
                var _url = url.replace("Recognition","ExecutionFinished")+'?_id='+executionQueueId+'&_hostSelected='+hostSelected;
                SendHttpRequest("POST", _url, json, null);
            }
            LogFunctionEnd();
        }

        function InitPage(){
            LogFunctionStart();

            if(application == true){
                document.getElementById('menu_button').style.display = 'inline';
                document.getElementById('menu_button').style.marginLeft = '400px';

                var element = document.getElementById("menu_items");
                element.classList.remove("flex-sm-row-reverse");
                element.classList.remove("d-sm-inline-flex");
                element.classList.remove("navbar-expand-sm");
                element.classList.remove("navbar-collapse");

                element = document.getElementById("navbarBrand");
                element.classList.remove("flex-sm-row-reverse");
                element.style.color = '#333';

                document.getElementById('footerContainer').style.color = '#333';  
            }

            document.getElementById("sendPhrase_text")
                .addEventListener("keyup", function(event) {
                event.preventDefault();
                if (event.keyCode === 13) {
                    document.getElementById("sendPhrase_button").click();
                }
            });

            if(IsMobile() == true){
                document.getElementById('div_start').style.display = 'block';
            }
                    
            hostsArrayString = hostsArrayString.replace(/&quot;/g,'"');
            if(_error != null && _error != '') console.warn(_error);
            try {
                hosts = JSON.parse(hostsArrayString);
            }
            catch (error) {  
 
            }   

            if(hosts != null && hosts.length > 0 ){
                hosts_cmb_string='<select name="hosts_cmb" class="btn btn-dark" id="hosts_cmb" value="'+hostSelected+'" style="background-color:#000; color:#333;">';
                for (var i = 0; i < hosts.length; i++)
                {
                    hosts_cmb_string+='<option>'+ hosts[i]+'</option>';
                }  
                hosts_cmb_string+='</select>';
                $("#hosts_cmb_container").html(hosts_cmb_string);

                document.getElementById('hosts_cmb').value = hostSelected;
            }
            LogFunctionEnd();
        }

        function SendPhrase(){
            LogFunctionStart();
            if(_reset == false){
                _phrase = $("#sendPhrase_text").val();
                if(_phrase != null && _phrase != ''){
                    var phraseTmp = _phrase;

                    LogWithTime("Sended phrase: " + _phrase);

                    CallWebSpeechDtoInJson(('_subType=' + subType + '&_step=' + step + '&_recognitionDisable=' + recognitionDisable + '&_id=' + id + '&_phrase=' + phraseTmp + '&_hostSelected='+$("#hosts_cmb option:selected").text() + '&_application='+application), "ResultSendPhrase");
                }
            }
            LogFunctionEnd();
        }

        function CallWebSpeechDtoInJson(paramString, funcName){     
            LogFunctionStart();
            var _url = url.replace("Recognition","GetWebSpeechDtoInJson")+'?' + paramString;

            PartialReset();
                    
            SendHttpRequest("GET", _url, null, funcName);
            LogFunctionEnd();
        } 

        function ResultSendPhrase(result){
            LogFunctionStart();
            VariablesAssignmentFromJson(result);
            
            phraseSended = true;
            if(finalStep == false) ehi=1;
            else ehi=0;

            Action(type, parameters);
            Speak();

            if(newWebSpeechRequestName != null && newWebSpeechRequestName != '' && newWebSpeechRequestName != 'null')  CallCreateWithParam(newWebSpeechRequestName);
            if(recognitionDisable == true) RecognitionDisable();  

            LogFunctionEnd();
        }

        function CallCreateWithParam(_newWebSpeechRequestName){
            LogFunctionStart();
            var _url = url.replace("Recognition","Create")+'?_newWebSpeechRequestName='+ _newWebSpeechRequestName;

            if(application == false){
                window.open(_url);
            }
            else if(application == true){
                window.open(_url, "Create WebSpeech", 'width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1');
            } 
            LogFunctionEnd();
        }

        function Upgrade() {
            LogFunctionStart();
            if(recognitionActive == true) StopAnimateIntervals();
            LogFunctionEnd();
        }

        function StartButton(event) {
            LogFunctionStart();
            if(IsMobile() == true){
                document.getElementById('start_img').src = "/Images/microphone.png";
            }

            try {
                recognition.abort();
                recognition.stop();
            }
            catch (error) { } 

            if (animateIntervals['ellipse1'] == null && recognitionActive == true) StartAnimateIntervals(70);
            final_transcript = '';
            recognition.lang = culture;

            try {
                recognition.start();
            }
            catch (error) { } 

            recognitionActive = true;
            ignore_onend = false;
            LogFunctionEnd();
        }

        function InitSpeech(){
            LogFunctionStart();
            if (!('webkitSpeechRecognition' in window)) {
                Upgrade();
            } else {
                recognition = new webkitSpeechRecognition('No warning should arise');

                if (IsMobile() == false){
                    recognition.continuous = true;
                    recognition.interimResults = true;
                }

                recognition.onstart = function () {
                    recognizing = true;
                    console.warn('info_speak_now');
                };

                recognition.onerror = function (event) {
                    console.warn('recognition.onerror: ' + event.error);

                    firstLoad = true;

                    if (IsMobile() == true) {
                        document.getElementById('start_img').src = "/Images/microphone.gif";
                        StopAnimateIntervals();
                        clearInterval(animateIntervals['StopAnimateIntervalsListening']);
                        animateIntervals['StopAnimateIntervalsListening'] = null;
                    }

                    if(recognitionActive == true){
                        if(partialResetActive == false) PartialReset(true,false);
                        if (IsMobile() == false) StartButton(event);
                    }
                    if (event.error == 'no-speech') {
                        console.warn('info_no_speech');
                        ignore_onend = true;
                    }
                    if (event.error == 'audio-capture') {
                        console.warn('info_no_microphone');
                        ignore_onend = true;
                    }
                    if (event.error == 'not-allowed') {
                        console.warn('not-allowed');
                        ignore_onend = true;
                    }
                };

                recognition.onend = function () {
                    LogFunctionStart('recognition.onend');
                    if(recognitionActive == true){
                        if(partialResetActive == false) PartialReset(true,false);
                        if (IsMobile() == false) StartButton(event);
                    }

                    if(IsMobile() == true){
                        document.getElementById('start_img').src = "/Images/microphone.gif";
                        StopAnimateIntervals();
                        clearInterval(animateIntervals['StopAnimateIntervalsListening']);
                        animateIntervals['StopAnimateIntervalsListening'] = null;
                    }
                    LogFunctionEnd('recognition.onend');
                };

                recognition.onresult = function (event) {
                    for (var i = event.resultIndex; i < event.results.length; ++i) {
                        if(_phrase == null){
                            _phrase = event.results[i][0].transcript.toLowerCase().trim();

                            if (_phrase != '' && _phrase != null) {
                                countTheTimesToPartialReset = 0;
                                countTheTimeToResetInSeconds = 0;

                                if(recognitionActive == true) StartAnimateIntervalsListening(10);
                                if(recognitionActive == true) StopAnimateIntervalsListening(500);

                                var _phraseSplit = _phrase.split(" ");
                                if (_phraseSplit.length > 0 && recognitionActive == true) {
                                    if (event.results[i].isFinal){
                                        LogWithTime("Recognition: " + _phrase);
                                        if (_phrase === listeningPhrase && ehi == 0 && _reset == false) {
                                            var audio = new Audio("/Files/Ehi.mp3");
                                            audio.play();
                                            
                                            var phraseTmp = _phrase;

                                            CallWebSpeechDtoInJson(('_subType=' + subType + '&_step=' + step + '&_recognitionDisable=' + recognitionDisable + '&_id=' + id + '&_phrase=' + phraseTmp + '&_hostSelected='+$("#hosts_cmb option:selected").text() + '&_application='+application), "ResultRecognitionEhi");
                                        } else if (ehi == 1 && _phrase != listeningPhrase && _phrase != null && _phrase != '' && _reset == false) {
                                            var audio = new Audio("/Files/Ehi.mp3");
                                            audio.play();

                                            var phraseTmp = _phrase;

                                            CallWebSpeechDtoInJson(('_subType=' + subType + '&_step=' + step + '&_recognitionDisable=' + recognitionDisable + '&_id=' + id + '&_phrase=' + phraseTmp + '&_hostSelected='+$("#hosts_cmb option:selected").text() + '&_application='+application), "ResultRecognitionPhrase");
                                        } else if (ehi == 0 && _phrase != listeningPhrase && _phrase.includes(listeningPhrase) && _phrase != null && _phrase != '' && _reset == false) {
                                            var audio = new Audio("/Files/Ehi.mp3");
                                            audio.play();

                                            var phraseTmp = _phrase;
                                            var start = phraseTmp.indexOf(listeningPhrase); 
                                            start = start + listeningPhrase.length;
                                            phraseTmp = phraseTmp.substring(start, phraseTmp.length);
                                            phraseTmp = phraseTmp.trim();

                                            CallWebSpeechDtoInJson(('_subType=' + subType + '&_step=' + step + '&_recognitionDisable=' + recognitionDisable + '&_id=' + id + '&_phrase=' + phraseTmp + '&_hostSelected='+$("#hosts_cmb option:selected").text() + '&_application='+application), "ResultRecognitionPhrase");
                                        }
                                    }
                                }
                            }
                            _phrase = null;
                        }
                    }

                    var interim_transcript = '';
                    if (typeof (event.results) == 'undefined') {
                        if(recognitionActive == true) StopAnimateIntervals();
                    }
                    for (var i = event.resultIndex; i < event.results.length; ++i) {
                        if (event.results[i].isFinal) {
                            final_transcript += event.results[i][0].transcript;
                        } else {
                            interim_transcript += event.results[i][0].transcript;
                        }
                    }
                    final_transcript = Capitalize(final_transcript);
                    document.getElementById('final_span').innerHTML = Linebreak(final_transcript);
                    document.getElementById('interim_span').innerHTML = Linebreak(interim_transcript);

                    if (final_transcript || interim_transcript) {
                        document.getElementById('final_span').innerHTML = '';
                    }
                };
            }
            LogFunctionEnd();
        }

        function ResultRecognitionPhrase(result){  
            LogFunctionStart();
            VariablesAssignmentFromJson(result);
            
            Action(type, parameters);
            Speak();
            if(newWebSpeechRequestName != null && newWebSpeechRequestName != '' && newWebSpeechRequestName != 'null')  CallCreateWithParam(newWebSpeechRequestName);
            if(recognitionDisable == true) RecognitionDisable();
            LogFunctionEnd();
        }

        function ResultRecognitionEhi(result){
            LogFunctionStart();
            VariablesAssignmentFromJson(result);
            
            Action(type, parameters);
            Speak();
            if(recognitionDisable == true) RecognitionDisable();
            LogFunctionEnd();
        }

        function SimulateClick(control) {
            LogFunctionStart();
            if (document.all) {
                control.click();
            } else {
                var evObj = document.createEvent('MouseEvents');
                evObj.initMouseEvent('click', true, true, window, 1, 12, 345, 7, 220, false, false, true, false, 0, null);
                control.dispatchEvent(evObj);
            }
            LogFunctionEnd();
        }

        function LogWithTime(value){
            var date = new Date();
            var dateString = date.toISOString().replace('T',' ').replace('Z','');
            value = dateString + ' - ' + value;
            console.log(value);  

            return value;
        }

        function LogFunctionStart(functionName){
            var date = new Date();
            var dateString = date.toISOString().replace('T',' ').replace('Z','');
            var value = LogFunctionStart.caller.name;
            if(functionName != null && functionName != undefined) value =functionName;
            value = dateString + ' - Function: ' + value +' - START';
            console.warn(value);  

            return value;
        }

        function LogFunctionEnd(functionName){
            var date = new Date();
            var dateString = date.toISOString().replace('T',' ').replace('Z','');
            var value = LogFunctionEnd.caller.name;
            if(functionName != null && functionName != undefined) value =functionName;
            value = dateString + ' - Function: ' + value +' - END';
            console.warn(value);  

            return value;
        }

        function Service() {
            if(voices == undefined || voices == null || voices.length == 0) voices = window.speechSynthesis.getVoices();

            //timeToEhiTimeoutInSeconds = 10; // to debug

            //console.log('ehi:'+ehi +' recognitionActive:'+recognitionActive + ' partialResetActive:'+partialResetActive+ ' countTheTimesToPartialReset:'+countTheTimesToPartialReset);

            // partial reset after ehi with wait countTheTimesToPartialReset
            if(partialResetActive && countTheTimesToPartialReset == timeToEhiTimeoutInSeconds){
                console.warn('TheTimesToPartialReset');
                countTheTimesToPartialReset = 0;
                PartialReset(false,true);
            }

            if(partialResetActive) countTheTimesToPartialReset++;
            else countTheTimesToPartialReset = 0;

            //timeToResetInSeconds = 12; //to debug
            //resetActive = true; //to debug

            //console.log('recognitionActive:'+recognitionActive + ' resetActive:'+resetActive+ ' countTheTimeToResetInSeconds:'+countTheTimeToResetInSeconds);

            // reset after idle time countTheTimeToResetInSeconds
            if(resetActive && countTheTimeToResetInSeconds == timeToResetInSeconds && recognitionActive == true && shortcutsOpen == false){
                console.warn('TheTimeToResetInSeconds');
                countTheTimeToResetInSeconds = 0;
                resetActive = false;  
                Reset(false, true);
            }

            if(resetActive == true && recognitionActive == true && shortcutsOpen == false) countTheTimeToResetInSeconds++;
            else countTheTimeToResetInSeconds = 0;
        }

        function SetAudio(){
            LogFunctionStart();
            try {
                if(audioActive == true) {
                    navigator.mediaDevices.getUserMedia({ audio: true })
                    .then(function (stream) {
                        window.localStream = stream;
                        console.warn('You let me use your mic!')
                    })
                    .catch(function (err) {
                        console.warn('No mic for you!')
                    });
                } else {
                    window.localStream.getTracks().forEach( (track) => {
                        track.stop();
                         console.warn('mic off')
                    });
                    window.localStream.getAudioTracks()[0].stop();
                }
            }
            catch (error) { }
            LogFunctionEnd();
        }

        function Speak(){
            LogFunctionStart();
            if (answer != null && answer != '') {
                document.getElementById('final_span').innerHTML = '';
                document.getElementById('interim_span').innerHTML = '';
                var _answer = HexDecode(answer);
                answer = null;
                
                LogWithTime("Answer: " + _answer);

                ReadOutLoud(_answer, false); 
            } else {
                PartialReset();
            }
            LogFunctionEnd();
        }

        function Reset(reset, _onlyRefresh){
            LogFunctionStart();
            PartialReset();
            if(_reset == false){ 
                 _reset = true;
                clearInterval(serviceInterval);
                location.href = '@Url.Action("Recognition", "WebSpeeches")?_reset='+ reset + '&_application='+application + '&_executionQueueId='+ executionQueueId + '&_hostSelected=' + $("#hosts_cmb option:selected").text() + '&_onlyRefresh='+_onlyRefresh;
            }
            LogFunctionEnd();
        }

        function PartialReset(excludeSpan, forceFinalStep){
            LogFunctionStart();
            if(finalStep == false && forceFinalStep != true) {
                if(phrase != null && phrase != ''){           

                }
            }
            else{
                stepType = "";
                step = 0;
                subType = "";
                id = 0;
            }
            type = "";
            parameters = "";
            ehi = 0;
            _phrase = null;
            audioActive = true;
            phraseSended = false;
            partialResetActive = false;
            //countTheTimesToPartialReset = 0;
            //countTheTimeToResetInSeconds = 0;
            
            if(excludeSpan != true)
            {
                $("#sendPhrase_text").val('');
                document.getElementById('final_span').innerHTML = '';
                document.getElementById('interim_span').innerHTML = '';
            }
            LogFunctionEnd();
        }

        function PartialInitFinal(){
            LogFunctionStart();
            if(firstLoad == false) fakeClickMilliseconds = 50;
            else {            
                firstLoad = false;
                fakeClickMilliseconds = 5000;
            }

            document.getElementById('final_span').innerHTML = '';
            document.getElementById('interim_span').innerHTML = '';

            clearTimeout(initFinalTimeoutStep2);
            initFinalTimeoutStep2 = null;
            clearTimeout(initFinalTimeoutStep1);
            initFinalTimeoutStep1 = null;

            sessionGuid = GenerateGuid();
            
            initFinalTimeoutStep1 = setTimeout(function(){
                LogFunctionStart('initFinalTimeoutStep1');
                SimulateClick(document.getElementById('fakeClick_button'));

                initFinalTimeoutStep2 = setTimeout(function(){
                    LogFunctionStart('initFinalTimeoutStep2');
                    Action(type, parameters);

                    SetAudio();
                
                    if(IsMobile() == false) StartButton(event);

                    Speak();

                    LogFunctionEnd('initFinalTimeoutStep2');
                }, 50);  
                LogFunctionEnd('initFinalTimeoutStep1');
            }, fakeClickMilliseconds);
            LogFunctionEnd();
        }

        function InitFinal(){
            LogFunctionStart();

            if(application == true) resetActive = true;

            clearInterval(serviceInterval);
            serviceInterval = setInterval( function() { Service(); }, 1000);
            
            PartialInitFinal();  

            var _shortcutsInJson = (shortcutsInJson).replace(/&quot;/g, '"');
            shortcuts = JSON.parse(_shortcutsInJson);
            
            CreateShortcuts(shortcuts);
            LogFunctionEnd();
        }

        function FakeClick(){
            LogFunctionStart();
            LogFunctionEnd();      
        }

        function RecognitionEnable(excludeSpan, forceFinalStep){  
            LogFunctionStart();
            PartialReset(excludeSpan, forceFinalStep);
            recognitionActive = true;
            recognitionDisable = false;
            audioActive = true;
            PartialInitFinal();
            document.getElementById("recognitionEnableDisable_image").src = '/Images/micOn.png';
            LogFunctionEnd();
        }

        function RecognitionEnableDisable(){
            LogFunctionStart();
            if(recognitionActive == true){
                PartialReset();
                RecognitionDisable();     
            } else {
                RecognitionEnable(false, true);
            }
            LogFunctionEnd();
        }

        function RecognitionDisable(){
            LogFunctionStart();
            recognitionDisable = true;
            recognitionActive = false;
            audioActive = false;
            SetAudio();
            recognition.abort();
            recognition.stop();
            StopAnimateIntervals();
            clearInterval(animateIntervals['StopAnimateIntervalsListening']);
            animateIntervals['StopAnimateIntervalsListening'] = null;
            document.getElementById("recognitionEnableDisable_image").src = '/Images/micOff.png';
            LogFunctionEnd();
        }

        function MenuClick() {
            LogFunctionStart();
            if(application == true){
                var element = document.getElementById("menu_items");
                if(element.style.display != 'inline') element.style.display = 'inline';
                else element.style.display = 'none';
            }
            LogFunctionEnd();
        }

        function OpenShortcuts(){
            LogFunctionStart();
            shortcutsOpen = true;
            countTheTimeToResetInSeconds = 0;
            var element = document.getElementById("div_shortcuts");
            element.style.display = "block";
            LogFunctionStart();
        }

        function CloseShortcuts(){
            LogFunctionStart();
            var element = document.getElementById("div_shortcuts");
            element.style.display = "none";
            shortcutsOpen= false;
            LogFunctionEnd();
        }

        function ActionShortcut(id){
            LogFunctionStart();
            clearTimeout(actionShortcutTimeout);       
            actionShortcutTimeout = null;

            for (var i = 0; i < shortcuts.length; ++i) {
                var shortcut = shortcuts[i];

                if (shortcut['Id'] == parseInt(id)) {

                    LogWithTime("Selected shortcut: " + shortcut['Title']);

                    if (application == false && shortcut['Type'] == 'Link') {
                        var _url = shortcut['Action'].replace(/&amp;/g,'&');
                        _url = DecodeUnicodeExtended(_url);

                        window.open(_url);
                    }
                    else if (application == true && shortcut['Type'] == 'Link') {
                        var _url = shortcut['Action'].replace(/&amp;/g,'&');
                        _url = DecodeUnicodeExtended(_url);

                        window.open(_url, "open link", 'width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1');
                    }
                    else {
                        CallWebSpeechDtoInJson(('_subType=' + subType + '&_step=' + step + '&_recognitionDisable=' + recognitionDisable + '&_id=' + shortcut['Id'] + '&_hostSelected=' + $("#hosts_cmb option:selected").text() + '&_application=' + application), "ResultActionShortcut");
                    }
                }
            }     
            
            actionShortcutTimeout = setTimeout(function () { 
                CloseShortcuts();               
            }, 50); 

            LogFunctionEnd();
        }

        function ResultActionShortcut(result){
            LogFunctionStart();
            VariablesAssignmentFromJson(result);

            if(finalStep == false) ehi=1;
            else ehi=0;
            
            Action(type, parameters);
            Speak();
            if(recognitionDisable == true) RecognitionDisable();
            LogFunctionEnd();
        }

        function Action(type, link){
            LogFunctionStart();
            link = DecodeUnicode(link);

            if(application == false && type == 'Link' && link != null && link != '' ){
                var _url = link.replace(/&amp;/g,'&');
                _url = DecodeUnicodeExtended(_url);

                window.open(_url);
            }

            else if(application == true && type == 'Link' && link != null && link != ''){
                var _url = link.replace(/&amp;/g,'&');
                _url = DecodeUnicodeExtended(_url);

                window.open(_url, "open link", 'width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1');
            } 

            else if(application == false && (type == 'SystemWebSearch' || type == 'WebSearch') && link != null && link != ''){
                var _url = link.replace(/&amp;/g,'&');
                _url = DecodeUnicodeExtended(_url);

                window.open(_url);
            }

            else if(application == true && (type == 'SystemWebSearch' || type == 'WebSearch') && link != null && link != ''){
                var _url = link.replace(/&amp;/g,'&');
                _url = DecodeUnicodeExtended(_url);

                window.open(_url, "search", 'width=auto,height=auto,left=10,top=10,scrollbars=1,resizable=1');
            }
            LogFunctionEnd();
        }

        function AddShortcuts(shortcut){
            LogFunctionStart();
            var element = document.getElementById("shortcutsContainer");
            var dt = '';

            if(shortcut['Ico'] == null || shortcut['Ico'] == '') shortcut['Ico'] = '/Images/Shortcuts/generic.png';

            dt += '<dt class="col-sm-3" style="">';
            dt += '<div>';
            dt += '<img class="btn shortcut-dark" id="shortcut_'+shortcut['Id']+'" src="'+shortcut['Ico']+'" alt="'+shortcut['Title']+'" style="width:90%; margin:5%; box-shadow: rgba(250, 250, 250, 0.95) 0px 0rem 1rem !important;" onclick="ActionShortcut(' + "" + shortcut['Id'] + "" +');">';

            dt += '</div>';
            dt += '<div style="font-size:18px;">'+shortcut['Title']+'</div>';
            dt += '</dt>';

            element.innerHTML += dt;
            LogFunctionEnd();
        }

        function CreateShortcuts(_shortcuts){
            LogFunctionStart();
            var element = document.getElementById("shortcutsContainer");
            element.innerHTML = '';

            for (var i = 0; i < _shortcuts.length; ++i) {
                var shortcut = _shortcuts[i];
                
                if(i == 0){
                    //var _shortcut = JSON.parse('{"Id":"' + i + '", "Ico":"/Images/Shortcuts/close.png", "Title":"Close", "Action":"Close"}');
                    //AddShortcuts(_shortcut);
                }

                AddShortcuts(shortcut);
            }
            LogFunctionEnd();
        }

	    function EllipseClick() {
           LogFunctionStart();
	       if(readOutLoudActive == false) OpenShortcuts();
           if(readOutLoudActive == true){
                readOutLoudActive = false;
                if(synth != null) synth.cancel();
            }
            LogFunctionEnd();
	    }

        function SendPhraseTextKeyDown() {
            LogFunctionStart();
            countTheTimeToResetInSeconds = 0;
            countTheTimesToPartialReset=0;
            LogFunctionEnd();
        }
    </script>
}
    
<div id="main" style="overflow:hidden;">
    <div style="text-align:center;">
        <div id="div_shortcuts" style="display: none; z-index: 999; width: 70%; position: absolute; background-color: rgba(0, 0, 0, 0.80); left: 0; right: 0; margin:auto; box-shadow: 0 0rem 1rem rgba(150, 150, 150, 0.95) !important; border-radius: 25px;">
            <div style="background-color: rgba(0, 0, 0, 0.95);  text-align:right; box-shadow: rgba(150, 150, 150, 0.25) 0 14px 12px -2px; border-radius: 25px;">
                <a style="z-index:9999; color:#333; font-size:35px; position:absolute; left:10px;">Shortcuts</a>
                <img class="btn shortcut-dark" id="shortcut_0" src="/Images/Shortcuts/close.png" alt="Close" style="height:50px; margin:5px;" onclick="ActionShortcut(0);">
            </div>
            <dl id="shortcutsContainer" class="row" style="max-height:600px; overflow-y:auto; " >
            </dl>
        </div>
        <div id="div_ellipse" style="margin:50px; padding-bottom:20px;">
            <svg viewBox="5 -15 190 140" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <filter id="blurMe">
                        <feGaussianBlur in="SourceGraphic" stdDeviation="5" />
                    </filter>
                </defs>
                <ellipse id="ellipse1" cx="100" cy="50" rx="50" ry="50" style="fill: #c9c30d;" filter="url(#blurMe)"/>
                <ellipse id="ellipse2" cx="100" cy="50" rx="50" ry="50" style="fill: #02ad02;" filter="url(#blurMe)"/>
                <ellipse id="ellipse3" cx="100" cy="50" rx="50" ry="50" style="fill: #026aad;" filter="url(#blurMe)"/>
                <ellipse id="ellipse4" cx="100" cy="50" rx="50" ry="50" style="fill: #7a1cc9;" filter="url(#blurMe)"/>
                <ellipse id="ellipse5" cx="100" cy="50" rx="50" ry="50" style="fill: #c22b10;" filter="url(#blurMe)"/>
                <ellipse id="ellipse6" cx="100" cy="50" rx="48" ry="48" style=" cursor:pointer;" onclick="EllipseClick();"  class="btn ellipse-dark" />
            </svg>
        </div>
        <div id="hosts_cmb_container" style="text-align:center; margin-top:-100px;">
        </div>
        <div id="div_text" style="text-align:center; width:100%; margin-top:2px;">
            <button id="recognitionEnableDisable_button" onclick="RecognitionEnableDisable()"  class="btn btn-dark" style="width:57px; border-width:1px; display: inline-block; outline: 0; box-shadow: none!important; height:38px; margin-top:-1px; margin-right:0px;">
                <img id="recognitionEnableDisable_image" src="/Images/micOn.png" alt="Microphone" style="height:34px; opacity:0.2; margin-top:-5px;">
            </button>
            <input type="text" id="sendPhrase_text" value="" style="height:38px; width:50%; display:inline-block;" onkeydown="SendPhraseTextKeyDown();" class="btn btn-dark"/>
            <button id="sendPhrase_button" onclick="SendPhrase()" class="btn btn-dark" style="width:57px; display:inline-block; color:#333; border-width:1px; outline: 0;box-shadow: none!important; height:38px; margin-top:-1px;">Send</button>
            <button id="fakeClick_button" onclick="FakeClick();" style="display:none; "></button>
        </div>
        <div id="results" style="text-align:center; overflow:auto; height:25px;">
            <span class="final" id="final_span"></span> 
            <span class="interim" id="interim_span" style=""></span>
        </div>
        <div id="div_start" style="display: none;">
	        <button id="start_button" onclick="StartButton(event);" style="border-width:1px; display: inline-block; outline: 0; box-shadow: none!important; height:100px; margin-top:100px; margin-right:0px;" class="btn btn-dark">
		        <img alt="Start" id="start_img" src="/Images/microphone.gif" style="height:100%; margin:-5px;">
	        </button>
        </div>
    </div>
</div>

<script>
	window.onload = function(e) {
        LogFunctionStart('window.onload');
        VariablesAssignmentFromModel();
        console.warn('resetAfterLoad:' + resetAfterLoad);
        if(resetAfterLoad == true) {
            clearTimeout(initFinalTimeoutStep2);
            initFinalTimeoutStep2 = null;
            clearTimeout(initFinalTimeoutStep1);
            initFinalTimeoutStep1 = null;
            if(synth != null) synth.cancel();
            answer = null;
            synth= null;
            speech = null;
            Reset(false, onlyRefresh);
        } else { 
		    InitPage();
            InitSpeech();
            InitFinal();  
            ClearUrl();
        }

        if(recognitionDisable == true) RecognitionDisable();
        LogFunctionEnd('window.onload');
	}	
</script>